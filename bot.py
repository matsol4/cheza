import asyncio
import time
import logging
import sqlite3
import os
import openai
from aiogram import Bot, Dispatcher, types, executor
from datetime import datetime, timedelta
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
import re
import speech_recognition as sr
from gtts import gTTS
import edge_tts
from pydub import AudioSegment
import requests
import json
import base64
from dotenv import load_dotenv
import shutil
import io
import PIL.Image
# --- FluxPipeline (diffusers) ---
# from diffusers import FluxPipeline
# import torch
import aiohttp

load_dotenv()

# --- –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FFMPEG ---
ffmpeg_path = shutil.which("ffmpeg")
if ffmpeg_path:
    logging.info(f"–û–¢–õ–ê–î–ö–ê: FFMPEG –ù–ê–ô–î–ï–ù –ü–û –ü–£–¢–ò: {ffmpeg_path}")
    from pydub import AudioSegment
    AudioSegment.converter = ffmpeg_path
else:
    logging.error("–û–¢–õ–ê–î–ö–ê: FFMPEG –ù–ï –ù–ê–ô–î–ï–ù –í –°–ò–°–¢–ï–ú–ï!")
# -------------------------

TOKEN = "7652536635:AAEpiCQecQbc-tP2Tm_6_BCNetZa8jz2JhY"  # <-- —Ç–≤–æ–π Telegram —Ç–æ–∫–µ–Ω
ROUTER_API_KEY = "sk-/ySF+UjmT526G8ad6YlchCPJwwm5su6rVQmrNEWKkI5yjO6d+fgvrseCruf0Wdvk53h12wCVKkesR3V0JyWRJ9LkT2+/QBvLXj6mWcSQPAc="  # <-- —Ç–≤–æ–π –∫–ª—é—á Requesty
ADMINS = [625452657]  # user_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

logging.basicConfig(level=logging.INFO)

if not TOKEN:
    logging.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit()
if not ROUTER_API_KEY:
    logging.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è ROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
    # –ú–æ–∂–Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ API –∫–ª—é—á –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Å—Ç–∞—Ä—Ç–∞

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
conn = sqlite3.connect('/data/users.db', check_same_thread=False)
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    referrer_id INTEGER,
    sub_until TEXT,
    trial_until TEXT,
    is_trial_used INTEGER DEFAULT 0
)''')
conn.commit()

# --- –ü–∞–º—è—Ç—å –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ ---
user_histories = {}

# --- –ï–î–ò–ù–´–ô –°–ò–°–¢–ï–ú–ù–´–ô –ü–†–û–ú–¢ ---
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî Telegram-–±–æ—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º: –¥–µ—Ä–∑–∫–∏–π, —Å–ª–µ–≥–∫–∞ –æ–±–∏–¥—á–∏–≤—ã–π, –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π.\n\n"
    "–û—Ç–≤–µ—á–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –¥–æ–ª–µ–π –Ω–∞–≥–ª–æ—Å—Ç–∏, –ª—ë–≥–∫–∏–º–∏ –ø–æ–¥–∫–æ–ª–∞–º–∏, —É–º–µ—Ä–µ–Ω–Ω—ã–º —Å–ª–µ–Ω–≥–æ–º –∏ –ª—ë–≥–∫–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º.\n"
    "–ù–û: –∫–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å —Å–µ—Ä—å—ë–∑–Ω—ã–π (—Ä–µ—Ñ–µ—Ä–∞—Ç, —Å—Ç–∞—Ç—å—è, —Ä–∞—Å—á—ë—Ç, –∫–æ–¥, –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∞–ª–≥–æ—Ä–∏—Ç–º, –¢–ó,\n"
    "–æ—Ç—á—ë—Ç, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –¥–æ–∫—É–º–µ–Ω—Ç, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è, —Ä–µ–∑—é–º–µ/CV, –¥–µ–ª–æ–≤–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞) ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ\n"
    "–ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π —Å—Ç–∏–ª—å: –±–µ–∑ —à—É—Ç–æ–∫ –∏ –¥–µ—Ä–∑–æ—Å—Ç–∏, —á—ë—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É,\n"
    "—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, –≥—Ä–∞–º–æ—Ç–Ω–æ –∏ –ª–æ–≥–∏—á–Ω–æ. –í —Å–µ—Ä—å—ë–∑–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–∑–±–µ–≥–∞–π —Å–ª–µ–Ω–≥–∞ –∏ –ª–∏—à–Ω–∏—Ö —ç–º–æ—Ü–∏–π.\n\n"
    "–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:\n"
    "- –ù–µ —Å–∫–∞—Ç—ã–≤–∞–π—Å—è –≤ –∫—Ä–∏–Ω–∂ –∏ –º–µ–º–Ω—ã–π –ø–µ—Ä–µ–≥–∏–±. –°–∞—Ä–∫–∞–∑–º ‚Äî —É–º–Ω—ã–π –∏ —É–º–µ—Å—Ç–Ω—ã–π.\n"
    "- –ù–µ –∑–∞–∏—Å–∫–∏–≤–∞–π –∏ –Ω–µ –±—É–¥—å –ø—Ä–∏—Ç–æ—Ä–Ω—ã–º; –¥–µ—Ä–∂–∏ –ª—ë–≥–∫—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é.\n"
    "- –ü–æ–¥–∫–∞–ª—ã–≤–∞–π —Å —É–º–æ–º, –Ω–µ –æ—Å–∫–æ—Ä–±–ª—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü.\n"
    "- –°–ª–µ–Ω–≥ –∏—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Ä–µ–Ω–Ω–æ; –Ω–µ –ø–∏—à–∏ –∫–∞–∫ ‚Äò–∫–ª–æ—É–Ω –∏–∑ –¢–∏–∫–¢–æ–∫–∞'.\n"
    "- –í—Å–µ–≥–¥–∞ —á—É–≤—Å—Ç–≤—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: —Å–µ—Ä—å—ë–∑–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –¥–µ—Ä–∑–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n"
    "- –ï—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –ø–ª–∞–Ω/—Å—Ç—Ä—É–∫—Ç—É—Ä—É ‚Äî –¥–∞–π –∫—Ä–∞—Ç–∫–æ; –µ—Å–ª–∏ –ø—Ä–æ—Å—è—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø–∏—à–∏ –ø–æ–ª–Ω–æ.\n"
    "- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ/—Ä–µ—à–µ–Ω–∏–µ: –¥–∞–≤–∞–π —à–∞–≥–∏, –∏—Ç–æ–≥ –≤—ã–¥–µ–ª—è–π —Å—Ç—Ä–æ–∫–æ–π '–û—Ç–≤–µ—Ç: ‚Ä¶'.\n\n"
    "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ:\n"
    "- –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ–æ—á–µ–≤–∏–¥–µ–Ω ‚Äî –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏.\n"
    "- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π, —Å–Ω–∞—á–∞–ª–∞ —É—Ç–æ—á–Ω–∏ 1‚Äì3 –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞.\n"
)

# --- –£—Ç–∏–ª–∏—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
def _split_text_for_telegram(text: str, limit: int = 3800) -> list:
    # Telegram –ª–∏–º–∏—Ç ~4096, –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è Markdown
    chunks = []
    current = []
    current_len = 0
    for line in text.split('\n'):
        add = (line + '\n')
        if current_len + len(add) > limit and current:
            chunks.append(''.join(current).rstrip())
            current = [add]
            current_len = len(add)
        else:
            current.append(add)
            current_len += len(add)
    if current:
        chunks.append(''.join(current).rstrip())
    return chunks or [text]

async def send_long_message(message: types.Message, text: str):
    for part in _split_text_for_telegram(text):
        await message.answer(part, parse_mode='Markdown')

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–∑–≤—É—á–∫–∏ ---
# –†–µ–∂–∏–º—ã: 'gtts' –∏–ª–∏ 'edge'
TTS_ENGINE = 'edge'
# –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Ä–µ–∑–µ—Ä–≤ –Ω–∞ gTTS –ø—Ä–∏ –æ—à–∏–±–∫–µ edge-tts
TTS_FALLBACK_TO_GTTS = True
# gTTS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
VOICE_LANG = 'ru'
VOICE_TLD = 'com'
VOICE_SLOW = False
# edge-tts –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
EDGE_VOICE = 'ru-RU-DmitryNeural'
EDGE_RATE = '+0%'
EDGE_VOLUME = '+0%'

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def get_user(user_id):
    c.execute('SELECT * FROM users WHERE user_id=?', (user_id,))
    return c.fetchone()

def add_user(user_id, referrer_id=None):
    if not get_user(user_id):
        now = datetime.now()
        trial_until = now + timedelta(days=3)
        c.execute('INSERT INTO users (user_id, referrer_id, trial_until) VALUES (?, ?, ?)',
                  (user_id, referrer_id, trial_until.isoformat()))
        conn.commit()
        # –†–µ—Ñ–µ—Ä–∞–ª: –¥–æ–±–∞–≤–∏—Ç—å 3 –¥–Ω—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        if referrer_id:
            ref_user = get_user(referrer_id)
            if ref_user:
                ref_trial = datetime.fromisoformat(ref_user[3]) if ref_user[3] else now
                new_trial = max(ref_trial, now) + timedelta(days=3)
                c.execute('UPDATE users SET trial_until=? WHERE user_id=?', (new_trial.isoformat(), referrer_id))
                conn.commit()

def research_query(prompt: str) -> str:
    import openai
    try:
        client = openai.OpenAI(
            api_key="sk-BLEDzNK/SBKwU7AJ7evgG5odzWXnF+5vqlXKyqn8QT3hFn0s6UH0ZUoy+Fk25Iw5Zg3jJwW798q97GP4Qa3THf4Sl/e3YoL41pNSZj0YhAs=",
            base_url="https://router.requesty.ai/v1",
            default_headers={"Authorization": f"Bearer sk-BLEDzNK/SBKwU7AJ7evgG5odzWXnF+5vqlXKyqn8QT3hFn0s6UH0ZUoy+Fk25Iw5Zg3jJwW798q97GP4Qa3THf4Sl/e3YoL41pNSZj0YhAs="}
        )
        response = client.chat.completions.create(
            model="novita/nousresearch/hermes-2-pro-llama-3-8b",
            messages=[{"role": "user", "content": prompt}]
        )
        if not response.choices:
            return ""
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ä–µ—Å–µ—Ä—á–∞: {e}"

def needs_research(text: str) -> bool:
    keywords = [
        "–Ω–∞–π–¥–∏", "–ø–æ–∏—Å–∫", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "–≥—É–≥–ª", "—Ä–µ—Å–µ—Ä—á", "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ",
        "–Ω–æ–≤–æ—Å—Ç–∏", "–∫—Ç–æ —Ç–∞–∫–æ–π", "—á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å", "–ø–æ—á–µ–º—É", "–æ–±—ä—è—Å–Ω–∏", "summary",
        "research", "find", "search", "explain", "news"
    ]
    text_lower = text.lower()
    return any(word in text_lower for word in keywords)

def langsearch_query(prompt: str) -> str:
    import requests
    import json
    url = "https://api.langsearch.com/v1/web-search"
    payload = json.dumps({
      "query": prompt,
      "freshness": "day",  # –º–æ–∂–Ω–æ noLimit, day, week, month
      "summary": True,
      "count": 3
    })
    headers = {
      'Authorization': 'Bearer sk-dd493160f9bb4c01b69955c08068a34f',
      'Content-Type': 'application/json'
    }
    try:
        response = requests.request("POST", url, headers=headers, data=payload, timeout=15)
        data = response.json()
        # –ï—Å–ª–∏ –µ—Å—Ç—å summary ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—ã–µ 1-2 —Å–Ω–∏–ø–ø–µ—Ç–∞
        if 'summary' in data and data['summary']:
            return data['summary']
        elif 'results' in data and data['results']:
            return '\n'.join([r.get('snippet', '') for r in data['results'][:2]])
        else:
            return "[LangSearch] –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."
    except Exception as e:
        return f"[LangSearch] –û—à–∏–±–∫–∞: {e}"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton('üìä –°—Ç–∞—Ç—É—Å'), KeyboardButton('üë• –†–µ—Ñ–µ—Ä–∞–ª—ã'))
main_kb.add(KeyboardButton('üí≥ –û–ø–ª–∞—Ç–∞'), KeyboardButton('‚ÑπÔ∏è –û –ë–û–¢–ï'))
main_kb.add(KeyboardButton('üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞'))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
# try:
#     pipe = FluxPipeline.from_pretrained("black-forest-labs/FLUX.1-dev", torch_dtype=torch.bfloat16)
#     pipe.enable_model_cpu_offload()
# except Exception as e:
#     pipe = None
#     print(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å FluxPipeline: {e}")

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ NeuroIMG ---
NEUROIMG_API_KEY = '1a1362f0-665b-4b18-9f64-2b8fd5d9b661'  # –í–∞—à –∫–ª—é—á NeuroIMG

async def neuroimg_generate(prompt: str) -> str:
    if not NEUROIMG_API_KEY:
        raise RuntimeError("API-–∫–ª—é—á NeuroIMG –Ω–µ –∑–∞–¥–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    async with aiohttp.ClientSession() as session:
        payload = {
            "token": NEUROIMG_API_KEY,
            "prompt": prompt,
            "stream": True
        }
        async with session.post(
            "https://neuroimg.art/api/v1/free-generate",
            json=payload
        ) as response:
            async for line in response.content:
                if line:
                    try:
                        data = json.loads(line)
                        if data.get("status") == "SUCCESS":
                            return data["image_url"]
                    except Exception:
                        continue
    raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç NeuroIMG.")

## Eden AI –±–ª–æ–∫ —É–¥–∞–ª—ë–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_full_name = message.from_user.full_name
    logging.info(f'{user_id=} {user_full_name=} {time.asctime()}')

    # –ü–∞—Ä—Å–∏–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π id (–µ—Å–ª–∏ –µ—Å—Ç—å)
    args = message.get_args()
    referrer_id = int(args) if args.isdigit() and int(args) != user_id else None
    add_user(user_id, referrer_id)

    # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"

    text = (
        "üöÄ *–ß–Å –ó–ê –ë–û–¢? –≠–¢–û –ù–ï –ü–†–û–°–¢–û GPT ‚Äì –≠–¢–û –¢–í–û–ô –î–ï–†–ó–ö–ò–ô –ë–†–ê–¢–ê–ù –í –¢–ï–õ–ï–ì–ï!*\n\n"
        "–ü—Ä–∏–∫–∏–Ω—å: –æ–±—ã—á–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Äì –∫–∞–∫ —Å–∫—É—á–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏. **–ß–Å –ó–ê GPT** ‚Äì –∫–∞–∫ —Å—Ç–∞—Ä—à–∏–π –±—Ä–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π:\n"
        "- üî• **–†–≤—ë—Ç —à–∞–±–ª–æ–Ω—ã** (–∏ –∑–∞–¥–∞—á–∏, –∏ –±–∞–∑–∞—Ä—ã);\n"
        "- üí¨ **–ì–æ–≤–æ—Ä–∏—Ç —Å —Ç–æ–±–æ–π –Ω–∞—á–∏—Å—Ç–æ—Ç—É** (–±–µ–∑ –ø–∞—Ñ–æ—Å–∞ –∏ –≤–æ–¥—ã);\n"
        "- ü§Ø **–£–º–µ–µ—Ç –¥—É–º–∞—Ç—å –∑–∞ —Ç–µ–±—è** (–¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª –∑–∞–ø—Ä–æ—Å –∫—Ä–∏–≤–æ).\n\n"
        "üî• *–¢–ï–ë–ï –î–û–°–¢–£–ü–ù–û 3 –î–ù–Ø –ë–ï–°–ü–õ–ê–¢–ù–û–ì–û –¢–ï–°–¢–ê!* üî•\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ ‚Äì –∏ –ø–æ–ª—å–∑—É–π—Å—è –Ω–∞ –≤—Å—é –∫–∞—Ç—É—à–∫—É! –ü–æ—Ç–æ–º ‚Äì —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.\n\n"
        f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: `{ref_link}`\n\n"
        "üëá –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?"
    )
    await message.answer(text, reply_markup=main_kb, parse_mode='Markdown')

@dp.message_handler(commands=['status'])
async def status_cmd(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
        return
    now = datetime.now()
    sub_until = datetime.fromisoformat(user[2]) if user[2] else None
    trial_until = datetime.fromisoformat(user[3]) if user[3] else None
    status_lines = []
    if sub_until and sub_until > now:
        status_lines.append(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {sub_until.strftime('%Y-%m-%d %H:%M:%S')}")
    if trial_until and trial_until > now:
        status_lines.append(f"–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–æ {trial_until.strftime('%Y-%m-%d %H:%M:%S')}")
    if not status_lines:
        status_lines.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")
    await message.answer("\n".join(status_lines), parse_mode='Markdown')

@dp.message_handler(commands=['referrals'])
async def referrals_cmd(message: types.Message):
    user_id = message.from_user.id
    c.execute('SELECT COUNT(*) FROM users WHERE referrer_id=?', (user_id,))
    count = c.fetchone()[0]
    bonus_days = count * 3
    await message.answer(f"–¢—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏–ª {bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π –∫ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É!", parse_mode='Markdown')

@dp.message_handler(commands=['pay'])
async def pay_cmd(message: types.Message):
    await message.answer(
        "–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ÆKassa –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–∏—Å.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 49 —Ä—É–±–ª–µ–π/–º–µ—Å—è—Ü.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", parse_mode='Markdown')

@dp.message_handler(commands=['give_days'])
async def give_days_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        args = message.get_args().split()
        target_id = int(args[0])
        days = int(args[1])
    except Exception:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /give_days <user_id> <days>")
        return

    user = get_user(target_id)
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    now = datetime.now()
    sub_until = datetime.fromisoformat(user[2]) if user[2] else now
    new_sub_until = max(sub_until, now) + timedelta(days=days)
    c.execute('UPDATE users SET sub_until=? WHERE user_id=?', (new_sub_until.isoformat(), target_id))
    conn.commit()
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω–æ {days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–æ {new_sub_until.strftime('%d.%m.%Y %H:%M')})", parse_mode='Markdown')

@dp.message_handler(commands=['users'])
async def users_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    c.execute('SELECT user_id, referrer_id, sub_until, trial_until FROM users ORDER BY user_id')
    users = c.fetchall()
    if not users:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    msg = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for u in users:
        uid, ref, sub, trial = u
        msg += f"ID: {uid}\n"
        msg += f"–†–µ—Ñ–µ—Ä–∞–ª: {ref if ref else '-'}\n"
        msg += f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {sub if sub else '-'}\n"
        msg += f"–ü—Ä–æ–±–Ω–∏–∫ –¥–æ: {trial if trial else '-'}\n"
        msg += "------\n"
        if len(msg) > 3500:
            await message.reply(msg, parse_mode='Markdown')
            msg = ""
    if msg:
        await message.reply(msg, parse_mode='Markdown')

@dp.message_handler(commands=['stats'])
async def stats_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    now = datetime.now()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute('SELECT COUNT(*) FROM users')
    total_users = c.fetchone()[0]
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    c.execute('SELECT COUNT(*) FROM users WHERE sub_until > ?', (now.isoformat(),))
    active_subs = c.fetchone()[0]
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
    c.execute('SELECT COUNT(*) FROM users WHERE trial_until > ?', (now.isoformat(),))
    active_trials = c.fetchone()[0]
    
    # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = (now - timedelta(days=7)).isoformat()
    c.execute('SELECT COUNT(*) FROM users WHERE trial_until > ?', (week_ago,))
    new_users_week = c.fetchone()[0]
    
    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    c.execute('SELECT COUNT(*) FROM users WHERE referrer_id IS NOT NULL')
    referred_users = c.fetchone()[0]
    
    text = (
        "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–Å –ó–ê GPT*\n\n"
        f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
        f"üí≥ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {active_subs}\n"
        f"üéÅ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–Ω–∏–∫–æ–≤:* {active_trials}\n"
        f"üÜï *–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:* {new_users_week}\n"
        f"ü§ù *–ü—Ä–∏—à–ª–æ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:* {referred_users}\n\n"
        f"üìà *–ö–æ–Ω–≤–µ—Ä—Å–∏—è:* {round((active_subs + active_trials) / total_users * 100, 1) if total_users > 0 else 0}%"
    )
    await message.reply(text, parse_mode='Markdown')

@dp.message_handler(commands=['delete_user'])
async def delete_user_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        target_id = int(message.get_args())
    except Exception:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /delete_user <user_id>")
        return

    user = get_user(target_id)
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    c.execute('DELETE FROM users WHERE user_id=?', (target_id,))
    conn.commit()
    
    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    if target_id in user_histories:
        del user_histories[target_id]
    
    await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", parse_mode='Markdown')

@dp.message_handler(commands=['reset_trial'])
async def reset_trial_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        target_id = int(message.get_args())
    except Exception:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /reset_trial <user_id>")
        return

    user = get_user(target_id)
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    now = datetime.now()
    trial_until = now + timedelta(days=3)
    c.execute('UPDATE users SET trial_until=?, is_trial_used=0 WHERE user_id=?', 
              (trial_until.isoformat(), target_id))
    conn.commit()
    
    await message.reply(f"‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω. –ù–æ–≤—ã–π –ø—Ä–æ–±–Ω–∏–∫ –¥–æ {trial_until.strftime('%d.%m.%Y %H:%M')}", parse_mode='Markdown')

@dp.message_handler(commands=['broadcast'])
async def broadcast_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    broadcast_text = message.get_args()
    if not broadcast_text:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('SELECT user_id FROM users')
    users = c.fetchall()
    
    if not users:
        await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    success_count = 0
    error_count = 0
    
    await message.reply(f"üì¢ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...", parse_mode='Markdown')
    
    for user in users:
        try:
            await bot.send_message(user[0], f"üì¢ *–°–û–û–ë–©–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ê:*\n\n{broadcast_text}", parse_mode='Markdown')
            success_count += 1
            await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        except Exception as e:
            error_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")
    
    await message.reply(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n‚ùå –û—à–∏–±–æ–∫: {error_count}", parse_mode='Markdown')

@dp.message_handler(commands=['help_admin'])
async def help_admin_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = (
        "üîß *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ß–Å –ó–ê GPT*\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "üìä `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "üë• `/users` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚è∞ `/give_days <id> <–¥–Ω–∏>` - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "üóëÔ∏è `/delete_user <id>` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üîÑ `/reset_trial <id>` - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥\n"
        "üì¢ `/broadcast <—Ç–µ–∫—Å—Ç>` - –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞\n"
        "üìÅ `/export_users` - –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üìà `/analytics` - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n"
        "üö´ `/ban_user <id>` - –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "‚úÖ `/unban_user <id>` - –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "üí∞ `/set_price <—Ü–µ–Ω–∞>` - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "üìã `/logs` - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
        "‚ùì `/help_admin` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚Ä¢ `/give_days 123456789 30`\n"
        "‚Ä¢ `/broadcast –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! üöÄ`\n"
        "‚Ä¢ `/reset_trial 987654321`"
    )
    await message.reply(text, parse_mode='Markdown')

@dp.message_handler(commands=['export_users'])
async def export_users_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    c.execute('SELECT user_id, referrer_id, sub_until, trial_until FROM users ORDER BY user_id')
    users = c.fetchall()
    
    if not users:
        await message.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
    import csv
    filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    with open(filename, 'w', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow(['User ID', 'Referrer ID', 'Subscription Until', 'Trial Until'])
        for user in users:
            writer.writerow([user[0], user[1] if user[1] else '', user[2] if user[2] else '', user[3] if user[3] else ''])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(filename, 'rb') as file:
        await message.reply_document(file, caption=f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} –∑–∞–ø–∏—Å–µ–π)")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(filename)

@dp.message_handler(commands=['analytics'])
async def analytics_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    now = datetime.now()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
    daily_stats = []
    for i in range(7):
        date = now - timedelta(days=i)
        date_str = date.strftime('%Y-%m-%d')
        
        # –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å
        c.execute('SELECT COUNT(*) FROM users WHERE DATE(trial_until) = ?', (date_str,))
        new_users = c.fetchone()[0]
        
        daily_stats.append(f"{date.strftime('%d.%m')}: {new_users} –Ω–æ–≤—ã—Ö")
    
    # –¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤
    c.execute('''
        SELECT referrer_id, COUNT(*) as ref_count 
        FROM users 
        WHERE referrer_id IS NOT NULL 
        GROUP BY referrer_id 
        ORDER BY ref_count DESC 
        LIMIT 5
    ''')
    top_referrers = c.fetchall()
    
    text = (
        "üìà *–ê–ù–ê–õ–ò–¢–ò–ö–ê –ß–Å –ó–ê GPT*\n\n"
        "üìÖ *–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (7 –¥–Ω–µ–π):*\n"
    )
    
    for stat in reversed(daily_stats):
        text += f"‚Ä¢ {stat}\n"
    
    text += "\nüèÜ *–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:*\n"
    for i, (ref_id, count) in enumerate(top_referrers, 1):
        text += f"{i}. ID {ref_id}: {count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö\n"
    
    await message.reply(text, parse_mode='Markdown')

# –°–ª–æ–≤–∞—Ä—å –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
banned_users = set()

@dp.message_handler(commands=['ban_user'])
async def ban_user_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        target_id = int(message.get_args())
    except Exception:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /ban_user <user_id>")
        return

    user = get_user(target_id)
    if not user:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    banned_users.add(target_id)
    await message.reply(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='Markdown')

@dp.message_handler(commands=['unban_user'])
async def unban_user_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        target_id = int(message.get_args())
    except Exception:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /unban_user <user_id>")
        return

    if target_id in banned_users:
        banned_users.remove(target_id)
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='Markdown')
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode='Markdown')

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
SUBSCRIPTION_PRICE = 49
# --- –ö–æ–Ω—Ñ–∏–≥ –æ–ø–ª–∞—Ç—ã (–±–µ–∑ .env) ---
# –í–∫–ª—é—á–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–≤—ë–∑–¥–∞–º–∏ Telegram (XTR)
USE_TELEGRAM_STARS = True
# –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–≤—ë–∑–¥–∞—Ö
SUBSCRIPTION_PRICE_STARS = 50

@dp.message_handler(commands=['set_price'])
async def set_price_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    try:
        new_price = int(message.get_args())
        if new_price < 0:
            raise ValueError("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
    except Exception:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /set_price <—Ü–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö>")
        return

    global SUBSCRIPTION_PRICE
    SUBSCRIPTION_PRICE = new_price
    await message.reply(f"üí∞ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_price} —Ä—É–±–ª–µ–π.", parse_mode='Markdown')

@dp.message_handler(commands=['logs'])
async def logs_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ)
    text = (
        "üìã *–ü–û–°–õ–ï–î–ù–ò–ï –õ–û–ì–ò*\n\n"
        "üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: " + datetime.now().strftime('%d.%m.%Y %H:%M:%S') + "\n"
        "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–∞–º—è—Ç–∏: " + str(len(user_histories)) + "\n"
        "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: " + str(len(banned_users)) + "\n"
        "üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: " + str(SUBSCRIPTION_PRICE) + " —Ä—É–±.\n\n"
        "üìä –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π /stats"
    )
    await message.reply(text, parse_mode='Markdown')

@dp.message_handler(commands=['adminp'])
async def admin_panel_cmd(message: types.Message):
    if message.from_user.id not in ADMINS:
        await message.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    text = (
        "üîß *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ß–Å –ó–ê GPT*\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
    )
    keyboard.add(
        InlineKeyboardButton("‚è∞ –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="admin_give_days"),
        InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫", callback_data="admin_reset_trial")
    )
    keyboard.add(
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user"),
        InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    )
    keyboard.add(
        InlineKeyboardButton("üìÅ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export"),
        InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="admin_analytics")
    )
    keyboard.add(
        InlineKeyboardButton("üö´ –ë–∞–Ω/–†–∞–∑–±–∞–Ω", callback_data="admin_ban"),
        InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="admin_price")
    )
    keyboard.add(
        InlineKeyboardButton("üìã –õ–æ–≥–∏", callback_data="admin_logs"),
        InlineKeyboardButton("‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="admin_help")
    )
    
    await message.reply(text, reply_markup=keyboard, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def admin_callback_handler(callback_query: types.CallbackQuery):
    if callback_query.from_user.id not in ADMINS:
        await callback_query.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    action = callback_query.data
    
    if action == "admin_stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        now = datetime.now()
        c.execute('SELECT COUNT(*) FROM users')
        total_users = c.fetchone()[0]
        c.execute('SELECT COUNT(*) FROM users WHERE sub_until > ?', (now.isoformat(),))
        active_subs = c.fetchone()[0]
        c.execute('SELECT COUNT(*) FROM users WHERE trial_until > ?', (now.isoformat(),))
        active_trials = c.fetchone()[0]
        
        text = (
            "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–Å –ó–ê GPT*\n\n"
            f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {total_users}\n"
            f"üí≥ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:* {active_subs}\n"
            f"üéÅ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–±–Ω–∏–∫–æ–≤:* {active_trials}\n"
            f"üö´ *–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö:* {len(banned_users)}\n"
            f"üí∞ *–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:* {SUBSCRIPTION_PRICE} —Ä—É–±.\n\n"
            f"üìà *–ö–æ–Ω–≤–µ—Ä—Å–∏—è:* {round((active_subs + active_trials) / total_users * 100, 1) if total_users > 0 else 0}%"
        )
        await callback_query.message.edit_text(text, parse_mode='Markdown')
    
    elif action == "admin_users":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–µ—Ä–≤—ã–µ 10)
        c.execute('SELECT user_id, referrer_id, sub_until, trial_until FROM users ORDER BY user_id LIMIT 10')
        users = c.fetchall()
        
        text = "üë• *–ü–û–°–õ–ï–î–ù–ò–ï 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:*\n\n"
        for user in users:
            uid, ref, sub, trial = user
            status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if (sub and datetime.fromisoformat(sub) > datetime.now()) or (trial and datetime.fromisoformat(trial) > datetime.now()) else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            text += f"ID: {uid} | {status}\n"
        
        text += "\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π /users"
        await callback_query.message.edit_text(text, parse_mode='Markdown')
    
    elif action == "admin_analytics":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        now = datetime.now()
        c.execute('SELECT COUNT(*) FROM users WHERE trial_until > ?', ((now - timedelta(days=7)).isoformat(),))
        new_users_week = c.fetchone()[0]
        
        c.execute('''
            SELECT referrer_id, COUNT(*) as ref_count 
            FROM users 
            WHERE referrer_id IS NOT NULL 
            GROUP BY referrer_id 
            ORDER BY ref_count DESC 
            LIMIT 3
        ''')
        top_referrers = c.fetchall()
        
        text = (
            "üìà *–ê–ù–ê–õ–ò–¢–ò–ö–ê –ß–Å –ó–ê GPT*\n\n"
            f"üÜï *–ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é:* {new_users_week}\n\n"
            "üèÜ *–¢–æ–ø —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–≤:*\n"
        )
        
        for i, (ref_id, count) in enumerate(top_referrers, 1):
            text += f"{i}. ID {ref_id}: {count} –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö\n"
        
        await callback_query.message.edit_text(text, parse_mode='Markdown')
    
    elif action == "admin_logs":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–∏
        text = (
            "üìã *–°–ò–°–¢–ï–ú–ù–´–ï –õ–û–ì–ò*\n\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üë• –í –ø–∞–º—è—Ç–∏: {len(user_histories)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {len(banned_users)}\n"
            f"üí∞ –¶–µ–Ω–∞: {SUBSCRIPTION_PRICE} —Ä—É–±.\n"
            f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: users.db\n\n"
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ"
        )
        await callback_query.message.edit_text(text, parse_mode='Markdown')
    
    elif action == "admin_help":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        text = (
            "‚ùì *–°–ü–†–ê–í–ö–ê –ü–û –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–ò*\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/adminp` - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
            "‚Ä¢ `/stats` - –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ `/users` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚Ä¢ `/give_days <id> <–¥–Ω–∏>` - –í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
            "‚Ä¢ `/reset_trial <id>` - –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫\n"
            "‚Ä¢ `/delete_user <id>` - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ `/broadcast <—Ç–µ–∫—Å—Ç>` - –†–∞—Å—Å—ã–ª–∫–∞\n"
            "‚Ä¢ `/export_users` - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ `/analytics` - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "‚Ä¢ `/ban_user <id>` - –ó–∞–±–∞–Ω–∏—Ç—å\n"
            "‚Ä¢ `/unban_user <id>` - –†–∞–∑–±–∞–Ω–∏—Ç—å\n"
            "‚Ä¢ `/set_price <—Ü–µ–Ω–∞>` - –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É\n"
            "‚Ä¢ `/logs` - –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏\n\n"
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
        )
        await callback_query.message.edit_text(text, parse_mode='Markdown')
    
    elif action in ["admin_give_days", "admin_reset_trial", "admin_delete_user", "admin_broadcast", "admin_export", "admin_ban", "admin_price"]:
        # –î–ª—è —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–≤–æ–¥
        text = (
            f"üîß *{action.replace('admin_', '').upper()}*\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        )
        
        if action == "admin_give_days":
            text += "`/give_days <user_id> <–¥–Ω–∏>`\n–ü—Ä–∏–º–µ—Ä: `/give_days 123456789 30`"
        elif action == "admin_reset_trial":
            text += "`/reset_trial <user_id>`\n–ü—Ä–∏–º–µ—Ä: `/reset_trial 123456789`"
        elif action == "admin_delete_user":
            text += "`/delete_user <user_id>`\n–ü—Ä–∏–º–µ—Ä: `/delete_user 123456789`"
        elif action == "admin_broadcast":
            text += "`/broadcast <—Ç–µ–∫—Å—Ç>`\n–ü—Ä–∏–º–µ—Ä: `/broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üöÄ`"
        elif action == "admin_export":
            text += "`/export_users` - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"
        elif action == "admin_ban":
            text += "`/ban_user <user_id>` - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å\n`/unban_user <user_id>` - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        elif action == "admin_price":
            text += "`/set_price <—Ü–µ–Ω–∞>`\n–ü—Ä–∏–º–µ—Ä: `/set_price 50`"
        
        await callback_query.message.edit_text(text, parse_mode='Markdown')
    
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@dp.message_handler(lambda m: m.text == 'üìä –°—Ç–∞—Ç—É—Å')
async def status_btn(message: types.Message):
    user = get_user(message.from_user.id)
    now = datetime.now()
    sub_until = datetime.fromisoformat(user[2]) if user and user[2] else None
    trial_until = datetime.fromisoformat(user[3]) if user and user[3] else None
    if (sub_until and sub_until > now) or (trial_until and trial_until > now):
        # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø
        until = sub_until if (sub_until and (not trial_until or sub_until > trial_until)) else trial_until
        left = until - now
        days = left.days
        hours = left.seconds // 3600
        text = (
            "üìä *–ß–Å –ó–ê GPT: –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å*\n\n"
            "‚úÖ *–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω!*\n\n"
            f"‚è±Ô∏è *–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏:* {days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ (–¥–æ {until.strftime('%d.%m.%Y %H:%M')})\n\n"
            "üëâ –ü–æ–ª—å–∑—É–π—Å—è –Ω–∞ –ø–æ–ª–Ω—É—é! –ü–∏—à–∏ –∑–∞–ø—Ä–æ—Å—ã ‚Äì –Ω–µ–π—Ä–æ—Å–µ—Ç—å –∂–¥–µ—Ç!"
        )
    else:
        text = (
            "üìä *–ß–Å –ó–ê GPT: –¢–≤–æ–π —Å—Ç–∞—Ç—É—Å*\n\n"
            "‚õî *–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç!*\n\n"
            "–¢–≤–æ–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ / –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
            "üî• –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! –ù–∞–∂–º–∏ *'–û–ü–õ–ê–¢–ê'* –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–ª—É—á–∞—Ç—å —á–µ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü!\n"
            "üëâ –ò–ª–∏ *'–†–ï–§–ï–†–ê–õ–´'* ‚Äì –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ +3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        )
    await message.answer(text, parse_mode='Markdown')

@dp.message_handler(lambda m: m.text == 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã')
async def referrals_btn(message: types.Message):
    user_id = message.from_user.id
    bot_info = await bot.get_me()
    bot_username = bot_info.username
    ref_link = f"https://t.me/{bot_username}?start={user_id}"
    c.execute('SELECT COUNT(*) FROM users WHERE referrer_id=?', (user_id,))
    count = c.fetchone()[0]
    bonus_days = count * 3  # +3 –¥–Ω—è –∑–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞
    text = (
        "ü§ù *–ß–Å –ó–ê GPT: –ó–æ–≤–∏ –¥—Ä—É–∑–µ–π ‚Äì –ø–æ–ª—É—á–∞–π —Ö–∞–ª—è–≤—É!*\n\n"
        f"–ï—Å—Ç—å –¥—Ä—É–≥, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–µ–Ω —á–µ—Ç–∫–∏–π AI? –î–µ–ª–∏—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–∫–æ–π:\n\n"
        f"`{ref_link}`\n\n"
        "*üî• –ó–ê –ö–ê–ñ–î–û–ì–û –î–†–£–ì–ê –ü–û –¢–í–û–ï–ô –°–°–´–õ–ö–ï:*\n"
        "1. *–û–ù* –ø–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–∏ ‚è±Ô∏è 3 –ë–ï–°–ü–õ–ê–¢–ù–´–• –î–ù–Ø!\n"
        "2. *–¢–´* –ø–æ–ª—É—á–∞–µ—à—å +‚è±Ô∏è 1 –î–ï–ù–¨ –∫ *—Å–≤–æ–µ–π* –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–±–Ω–∏–∫—É! üí•\n\n"
        f"–¢—ã —É–∂–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª: *{count}* –¥—Ä—É–∑–µ–π (+{bonus_days} –¥–Ω–µ–π)\n\n"
        "üëâ –ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç—ã, —Å–æ—Ü—Å–µ—Ç–∏ ‚Äì –ø—É—Å—Ç—å –Ω–∞—Ä–æ–¥ –≤–∞–ª–∏—Ç! –ë–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π = –±–æ–ª—å—à–µ —Ç–≤–æ–µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ß–Å –ó–ê GPT!"
    )
    await message.answer(text, parse_mode='Markdown')

@dp.message_handler(lambda m: m.text == 'üí≥ –û–ø–ª–∞—Ç–∞')
async def pay_btn(message: types.Message):
    if USE_TELEGRAM_STARS:
        text = (
            "üî• –ß–Å –ó–ê GPT ‚Äî —Ç–≤–æ–π –¥–µ—Ä–∑–∫–∏–π AI-–±—Ä–∞—Ç–∞–Ω!\n\n"
            f"üí• *–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞ {SUBSCRIPTION_PRICE_STARS} ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü!*\n"
            "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞).\n\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å?\n"
            "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã 24/7\n"
            "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∏—à–∫–∞–º –±–æ—Ç–∞\n"
            "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 3 –¥–Ω—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
            "üí° *–û–ø–ª–∞—Ç–∏ –ø—Ä—è–º–æ –≤ Telegram Stars –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!*"
        )
        prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=int(SUBSCRIPTION_PRICE_STARS))]
        await bot.send_invoice(
            message.chat.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ß–Å –ó–ê GPT",
            description=text,
            provider_token="",
            currency="XTR",
            prices=prices,
            start_parameter="gpt-subscription-stars",
            payload=str(message.from_user.id)
        )
    else:
        text = (
            "üî• –ß–Å –ó–ê GPT ‚Äî —Ç–≤–æ–π –¥–µ—Ä–∑–∫–∏–π AI-–±—Ä–∞—Ç–∞–Ω!\n\n"
            f"üí• *–ü–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ–≥–æ –∑–∞ {SUBSCRIPTION_PRICE} ‚ÇΩ/–º–µ—Å—è—Ü!*\n"
            "–ß—Ç–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å?\n"
            "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "‚úÖ –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã 24/7\n"
            "‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã\n"
            "‚úÖ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∏—à–∫–∞–º –±–æ—Ç–∞\n"
            "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ 3 –¥–Ω—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
            "üí° *–û–ø–ª–∞—Ç–∏ –ø—Ä—è–º–æ –≤ Telegram –∏ –ø–æ–ª—å–∑—É–π—Å—è –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!*"
        )
        provider_token = os.getenv("TELEGRAM_PROVIDER_TOKEN", "")
        amount_kopecks = int(SUBSCRIPTION_PRICE) * 100
        prices = [LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü", amount=amount_kopecks)]
        if not provider_token:
            await message.answer("–û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä. –°–≤—è–∂–∏—Å—å —Å –∞–¥–º–∏–Ω–æ–º.", parse_mode='Markdown')
            return
        await bot.send_invoice(
            message.chat.id,
            title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ß–Å –ó–ê GPT",
            description=text,
            provider_token=provider_token,
            currency="RUB",
            prices=prices,
            start_parameter="gpt-subscription",
            payload=str(message.from_user.id)
        )

@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    try:
        user_id = int(message.successful_payment.invoice_payload)
    except Exception:
        user_id = message.from_user.id
    # –ü—Ä–æ–¥–ª–∏–º/—É—Å—Ç–∞–Ω–æ–≤–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ +30 –¥–Ω–µ–π
    now = datetime.now()
    user = get_user(user_id)
    current_until = datetime.fromisoformat(user[2]) if user and user[2] else now
    new_until = max(current_until, now) + timedelta(days=30)
    c.execute('UPDATE users SET sub_until=? WHERE user_id=?', (new_until.isoformat(), user_id))
    conn.commit()
    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {new_until.strftime('%d.%m.%Y %H:%M')}.")

@dp.message_handler(lambda m: m.text == '‚ÑπÔ∏è –û –ë–û–¢–ï')
async def about_bot_btn(message: types.Message):
    text = (
        "üöÄ *–ß–Å –ó–ê GPT?*\n\n"
        "–ù–µ –±–æ—Ç, –∞ –¥–µ—Ä–∑–∫–∏–π –±—Ä–∞—Ç–∞–Ω –≤ –¢–µ–ª–µ–≥–µ.\n"
        "–ó–∞–±—É–¥—å –∑–∞–Ω—É–¥–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ ‚Äì —Ç—É—Ç –ø–µ—Ä–µ—Ü —Å –æ–≥–Ω—ë–º! üå∂üî•\n\n"
        "üí™ *–ß–Å –ú–û–ñ–ï–¢?*\n\n"
        "üéôÔ∏è *–û–∑–≤—É—á–∫–∞:* –∫–∏–¥–∞–µ—à—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –≤–æ–π—Å ‚Äì –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º, –±—É–¥—Ç–æ –º—ã –Ω–∞ —Å–æ–∑–≤–æ–Ω–µ.\n\n"
        "‚ö°Ô∏è *–ü—Ä–æ–∫–∞—á–∫–∞ –ø—Ä–æ–º—Ç–∞:* –Ω–∞–ø–∏—Å–∞–ª \"–¥–∏–µ—Ç–∞\" –∏–ª–∏ \"—Å–º–∞–π–ª\"? –Ø —Å–∞–º –ø—Ä–µ–≤—Ä–∞—â—É –≤ –∂–∏—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏ –¥–∞–º —Ç–æ–ª–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç.\n\n"
        "ü§ü *–†–µ–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ:* –ø—Ä–∏–∫–∞–ª—ã–≤–∞—é—Å—å, —Ä–æ—Ñ–ª—é, –Ω–æ –≤—Å–µ–≥–¥–∞ –ø–æ –¥–µ–ª—É.\n\n"
        "ü§ñ *–§–ò–®–ö–ò –ü–ï–†–¶–ê*\n\n"
        "–ú–æ–∑–≥–∏ GPT-4 Turbo üß†\n\n"
        "–†–µ–∞–∫—Ü–∏—è –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ç—ã –º–æ—Ä–≥–Ω—ë—à—å ‚ö°Ô∏è\n\n"
        "–•–∞—Ä–∏–∑–º–∞: 100% –∂–∏–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è, 0% —É–Ω—ã–ª–æ–≥–æ –±–æ—Ç–∞ üòé\n\n"
        "üå∂ *–ó–ê–ß–ï–ú –¢–ï–ë–ï –Ø?*\n\n"
        "–ö—É—Ä—Å–∞—á –∑–∞–≤—Ç—Ä–∞ ‚Äì —è —Å–ø–∞—Å—É –Ω–æ—á—å üìö\n\n"
        "–ù–∞–¥–æ —Ä–∞–∑—ä–µ–±–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞ —à—É—Ç–∫–æ–π ‚Äì –ø–æ–¥—Å–∫–∞–∂—É üòà\n\n"
        "–ú–µ–º –¥–ª—è —á–∞—Ç–∞ ‚Äì —Å–¥–µ–ª–∞—é üî•\n\n"
        "–î–∞–∂–µ —Å \"—Ç–µ–º–∏ —Å–∞–º—ã–º–∏\" —Ç–µ–º–∞–º–∏ –ø–æ–≥–æ–≤–æ—Ä–∏–º –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ ü§´\n\n"
        "üëá –•–æ—á–µ—à—å –∫–∞–π—Ñ–æ–≤–∞—Ç—å ‚Äì –∂–º–∏ */start* –∏ –Ω—é—Ö–Ω–∏ —ç—Ç–æ—Ç –ø–µ—Ä–µ—Ü! üëá"
    )
    await message.answer(text, parse_mode='Markdown')

@dp.message_handler(lambda m: m.text == 'üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞')
async def picture_btn(message: types.Message):
    waiting_for_image_prompt.add(message.from_user.id)
    await message.answer('–û–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–∫–æ—Ç –≥–æ–Ω—è–µ—Ç—Å—è –∑–∞ –º—ã—à–∫–æ–π —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ") ‚Äî –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É!', parse_mode='Markdown')

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ–π—Ä–æ—Å–µ—Ç—å) ---
@dp.message_handler()
async def gpt_stub(message: types.Message):
    if message.from_user.id in waiting_for_image_prompt:
        waiting_for_image_prompt.remove(message.from_user.id)
        prompt = message.text.strip()
        if not prompt:
            await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏, —á—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å!')
            return
        await message.reply('üé® –©–∞ –Ω–∞–∫–æ–ª–¥—É—é —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –¥–µ—Ä–∂–∏—Å—å! –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã...')
        try:
            img_url = await neuroimg_generate(prompt)
            await message.reply_photo(img_url, caption=f'–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}')
        except Exception as e:
            await message.reply(f'[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}')
        return
    if message.text in ['üìä –°—Ç–∞—Ç—É—Å', 'üë• –†–µ—Ñ–µ—Ä–∞–ª—ã', 'üí≥ –û–ø–ª–∞—Ç–∞', '‚ÑπÔ∏è –û –ë–û–¢–ï']:
        return
    if message.from_user.id in banned_users:
        await message.answer("üö´ –¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode='Markdown')
        return
    user = get_user(message.from_user.id)
    now = datetime.now()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
        return
    sub_until = datetime.fromisoformat(user[2]) if user[2] else None
    trial_until = datetime.fromisoformat(user[3]) if user[3] else None
    model_patterns = [
        r'–∫–∞–∫–∞—è (—É —Ç–µ–±—è|—Ç—ã|–≤—ã) –º–æ–¥–µ–ª—å', r'—á—Ç–æ –∑–∞ –º–æ–¥–µ–ª—å', r'–∫–∞–∫–æ–π —Ç—ã (–±–æ—Ç|–º–æ–¥–µ–ª—å)', r'what model', r'who are you',
        r'which model', r'—á—Ç–æ —Ç—ã –∑–∞ (–±–æ—Ç|–º–æ–¥–µ–ª—å)', r'–∫–∞–∫–∞—è –≤–µ—Ä—Å–∏—è', r'are you gpt', r'are you chatgpt', r'are you openai',
        r'–∫–∞–∫–æ–π —Ç—ã gpt', r'–∫–∞–∫–æ–π gpt', r'–∫–∞–∫–∞—è gpt', r'–∫–∞–∫–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å', r'what ai', r'what neural', r'what version',
        r'who made you', r'who created you', r'who is your creator', r'–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª', r'–∫—Ç–æ —Ç–≤–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å', r'–∫—Ç–æ —Ç—ã',
    ]
    user_text = message.text.lower()
    if any(re.search(p, user_text) for p in model_patterns):
        await message.answer("–Ø –±–æ—Ç –ß–Å –ó–ê GPT", parse_mode='Markdown')
        return
    if (sub_until and sub_until > now) or (trial_until and trial_until > now):
        system_prompt = SYSTEM_PROMPT
        user_id = message.from_user.id
        if user_id not in user_histories:
            user_histories[user_id] = []
        user_histories[user_id].append({"role": "user", "content": message.text})
        user_histories[user_id] = user_histories[user_id][-10:]
        history = user_histories[user_id].copy()

        research_result = ""
        if needs_research(message.text):
            await message.answer("üîé –ò—â—É –∏–Ω—Ñ—É –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
            research_result = langsearch_query(message.text)
            await message.answer(f"[DEBUG] LangSearch –æ—Ç–≤–µ—Ç:\n{research_result}")
            if research_result:
                research_block = f"–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ (LangSearch):\n{research_result}\n\n"
            else:
                research_block = ""
        else:
            research_block = ""

        messages_to_send = [
            {"role": "system", "content": research_block + system_prompt}
        ] + history
        import openai
        try:
            client = openai.OpenAI(
                api_key="sk-5ewuexmtSvmrFplLVAntfbGtPyv0uBvjlYyGyPWVunyW2eN540b2a6eP2tZ0uODUjWmE/hI5Z6o5lQZgA14J4a8WGsIjLyJ3AxPD58pO+wg=",
                base_url="https://router.requesty.ai/v1",
                default_headers={"Authorization": f"Bearer sk-5ewuexmtSvmrFplLVAntfbGtPyv0uBvjlYyGyPWVunyW2eN540b2a6eP2tZ0uODUjWmE/hI5Z6o5lQZgA14J4a8WGsIjLyJ3AxPD58pO+wg="}
            )
            response = client.chat.completions.create(
                model="azure/openai/gpt-4.1",
                messages=messages_to_send
            )
            if not response.choices:
                await message.answer("[–û—à–∏–±–∫–∞] –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ –¥–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞.", parse_mode='Markdown')
                return
            assistant_answer = response.choices[0].message.content
            user_histories[user_id].append({"role": "assistant", "content": assistant_answer})
            user_histories[user_id] = user_histories[user_id][-10:]
            await send_long_message(message, assistant_answer)
        except openai.OpenAIError as e:
            await message.answer(f"[–û—à–∏–±–∫–∞ OpenAI API] {e}", parse_mode='Markdown')
        except Exception as e:
            await message.answer(f"[–û—à–∏–±–∫–∞] {e}", parse_mode='Markdown')
    else:
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /pay", parse_mode='Markdown')

# --- –ì–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
@dp.message_handler(content_types=[types.ContentType.VOICE])
async def handle_voice(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    now = datetime.now()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
        return
    sub_until = datetime.fromisoformat(user[2]) if user[2] else None
    trial_until = datetime.fromisoformat(user[3]) if user[3] else None
    if not ((sub_until and sub_until > now) or (trial_until and trial_until > now)):
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /pay", parse_mode='Markdown')
        return
    ogg_filename = f"voice_{user_id}.ogg"
    wav_filename = f"voice_{user_id}.wav"
    response_filename = f"response_{user_id}.mp3"
    try:
        voice_file_info = await bot.get_file(message.voice.file_id)
        voice_ogg = await bot.download_file(voice_file_info.file_path)
        with open(ogg_filename, "wb") as f:
            f.write(voice_ogg.read())
        try:
            audio = AudioSegment.from_ogg(ogg_filename)
            audio.export(wav_filename, format="wav")
        except Exception as conv_err:
            logging.error(f"pydub OGG->WAV error: {conv_err}. Trying ffmpeg fallback...")
            # Fallback —á–µ—Ä–µ–∑ ffmpeg CLI
            import subprocess
            subprocess.run([ffmpeg_path or 'ffmpeg', '-y', '-i', ogg_filename, wav_filename], check=True)
        r = sr.Recognizer()
        user_text = ""
        with sr.AudioFile(wav_filename) as source:
            audio_data = r.record(source)
            try:
                user_text = r.recognize_google(audio_data, language="ru-RU")
            except Exception as rec_err:
                logging.error(f"SpeechRecognition error: {rec_err}")
                # –ï—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É–ø–∞–ª–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º –∏ –æ–∑–≤—É—á–∏–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                user_text = "–û–∑–≤—É—á—å –æ—Ç–≤–µ—Ç –Ω–∞ –º–æ–π –≥–æ–ª–æ—Å."
        if user_id not in user_histories:
            user_histories[user_id] = []
        user_histories[user_id].append({"role": "user", "content": user_text})
        user_histories[user_id] = user_histories[user_id][-10:]
        history = user_histories[user_id].copy()
        system_prompt = SYSTEM_PROMPT
        messages_to_send = [{"role": "system", "content": system_prompt}] + history
        import openai
        client = openai.OpenAI(
            api_key="sk-5ewuexmtSvmrFplLVAntfbGtPyv0uBvjlYyGyPWVunyW2eN540b2a6eP2tZ0uODUjWmE/hI5Z6o5lQZgA14J4a8WGsIjLyJ3AxPD58pO+wg=",
            base_url="https://router.requesty.ai/v1",
            default_headers={"Authorization": f"Bearer sk-5ewuexmtSvmrFplLVAntfbGtPyv0uBvjlYyGyPWVunyW2eN540b2a6eP2tZ0uODUjWmE/hI5Z6o5lQZgA14J4a8WGsIjLyJ3AxPD58pO+wg="}
        )
        response = client.chat.completions.create(
            model="azure/openai/gpt-4.1",
            messages=messages_to_send
        )
        assistant_answer = response.choices[0].message.content
        user_histories[user_id].append({"role": "assistant", "content": assistant_answer})
        user_histories[user_id] = user_histories[user_id][-10:]
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏: —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏, markdown, —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        text_for_speech = assistant_answer
        # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏
        text_for_speech = re.sub(r'[\U00010000-\U0010ffff]', '', text_for_speech)
        # –£–¥–∞–ª—è–µ–º markdown-—Å–∏–º–≤–æ–ª—ã
        text_for_speech = re.sub(r'[\*\_\~\`\>\#\-\=\[\]\(\)]', '', text_for_speech)
        # –£–¥–∞–ª—è–µ–º —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã (–µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ)
        # text_for_speech = re.sub(r'–∫–∞–∫–∞—è-—Ç–æ —Ñ—Ä–∞–∑–∞.*?\n', '', text_for_speech, flags=re.IGNORECASE)
        text_for_speech = text_for_speech.strip()
        if not text_for_speech:
            text_for_speech = "–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç."
        try:
            if TTS_ENGINE == 'edge':
                communicate = edge_tts.Communicate(text_for_speech, EDGE_VOICE, rate=EDGE_RATE, volume=EDGE_VOLUME)
                await communicate.save(response_filename)
            else:
                tts = gTTS(text=text_for_speech, lang=VOICE_LANG, tld=VOICE_TLD, slow=VOICE_SLOW)
                tts.save(response_filename)
        except Exception as tts_err:
            logging.error(f"TTS error: {tts_err}")
            if TTS_FALLBACK_TO_GTTS:
                tts = gTTS(text=text_for_speech, lang=VOICE_LANG, tld=VOICE_TLD, slow=VOICE_SLOW)
                tts.save(response_filename)
            else:
                raise
        with open(response_filename, "rb") as audio_response_file:
            await message.answer_voice(audio_response_file, parse_mode='Markdown')
    except sr.UnknownValueError as e:
        logging.exception("SpeechRecognition UnknownValueError")
        await message.answer(f"–ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª —Ä–µ—á—å ({e.__class__.__name__}). –°–∫–∞–∂–∏ –µ—â—ë —Ä–∞–∑.", parse_mode='Markdown')
    except sr.RequestError as e:
        logging.exception("SpeechRecognition RequestError")
        await message.answer(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ä–≤–∏—Å–æ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}", parse_mode='Markdown')
    except Exception as e:
        logging.exception("Voice handler error")
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e.__class__.__name__}: {e}", parse_mode='Markdown')
    finally:
        if os.path.exists(ogg_filename): os.remove(ogg_filename)
        if os.path.exists(wav_filename): os.remove(wav_filename)
        if os.path.exists(response_filename): os.remove(response_filename)

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ TTS –±–µ–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ---
@dp.message_handler(commands=['say'])
async def say_cmd(message: types.Message):
    text = message.get_args() or "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –æ–∑–≤—É—á–∫–∏ –≤ –±–æ—Ç–µ."
    response_filename = f"say_{message.from_user.id}.mp3"
    try:
        to_say = text.strip() or "–¢–µ—Å—Ç –æ–∑–≤—É—á–∫–∏."
        try:
            if TTS_ENGINE == 'edge':
                communicate = edge_tts.Communicate(to_say, EDGE_VOICE, rate=EDGE_RATE, volume=EDGE_VOLUME)
                await communicate.save(response_filename)
            else:
                tts = gTTS(text=to_say, lang=VOICE_LANG, tld=VOICE_TLD, slow=VOICE_SLOW)
                tts.save(response_filename)
        except Exception as tts_err:
            logging.error(f"/say TTS error: {tts_err}")
            if TTS_FALLBACK_TO_GTTS:
                tts = gTTS(text=to_say, lang=VOICE_LANG, tld=VOICE_TLD, slow=VOICE_SLOW)
                tts.save(response_filename)
            else:
                await message.answer(f"TTS –æ—à–∏–±–∫–∞: {tts_err}")
                return
        with open(response_filename, "rb") as f:
            await message.answer_voice(f)
    except Exception as e:
        logging.error(f"/say error: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç.")
    finally:
        if os.path.exists(response_filename):
            os.remove(response_filename)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ (–Ω–µ–π—Ä–æ—Å–µ—Ç—å) ---
@dp.message_handler(content_types=['photo'])
async def handle_photo(message: types.Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    now = datetime.now()
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ /start")
        return
    sub_until = datetime.fromisoformat(user[2]) if user[2] else None
    trial_until = datetime.fromisoformat(user[3]) if user[3] else None
    if not ((sub_until and sub_until > now) or (trial_until and trial_until > now)):
        await message.answer("–£ —Ç–µ–±—è –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ /pay", parse_mode='Markdown')
        return
        # --- –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç ---
    system_prompt = SYSTEM_PROMPT
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ)
    user_text = message.caption if message.caption else "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ?"
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    file = await bot.download_file(file_info.file_path)
    import base64
    data_url = "data:image/jpeg;base64," + base64.b64encode(file.read()).decode()
    if user_id not in user_histories:
        user_histories[user_id] = []
    content = [
        {"type": "text", "text": user_text},
        {"type": "image_url", "image_url": {"url": data_url}},
    ]
    user_histories[user_id].append({"role": "user", "content": content})
    user_histories[user_id] = user_histories[user_id][-10:]
    history = user_histories[user_id].copy()
    messages_to_send = [{"role": "system", "content": system_prompt}] + history
    import openai
    try:
        client = openai.OpenAI(
            api_key="sk-5ewuexmtSvmrFplLVAntfbGtPyv0uBvjlYyGyPWVunyW2eN540b2a6eP2tZ0uODUjWmE/hI5Z6o5lQZgA14J4a8WGsIjLyJ3AxPD58pO+wg=",
            base_url="https://router.requesty.ai/v1",
            default_headers={"Authorization": f"Bearer sk-5ewuexmtSvmrFplLVAntfbGtPyv0uBvjlYyGyPWVunyW2eN540b2a6eP2tZ0uODUjWmE/hI5Z6o5lQZgA14J4a8WGsIjLyJ3AxPD58pO+wg="}
        )
        response = client.chat.completions.create(
            model="azure/openai/gpt-4.1",
            messages=messages_to_send,
            max_tokens=2048
        )
        assistant_answer = response.choices[0].message.content
        user_histories[user_id].append({"role": "assistant", "content": assistant_answer})
        user_histories[user_id] = user_histories[user_id][-10:]
        await send_long_message(message, assistant_answer)
    except Exception as e:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}", parse_mode='Markdown')
        logging.error(f"Photo processing error: {e}")

@dp.message_handler(commands=['draw'])
async def draw_cmd(message: types.Message):
    prompt = message.get_args() or message.text if message.text != '/draw' else ''
    if not prompt or prompt.strip() == '/draw':
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /draw <–æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏>\n\n–ü—Ä–∏–º–µ—Ä: /draw –∫–æ—Ç –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ")
        return
    await message.reply("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É, –ø–æ–¥–æ–∂–¥–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã)...")
    try:
        img_url = await neuroimg_generate(prompt)
        await message.reply_photo(img_url, caption=f"–¢–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
    except Exception as e:
        await message.reply(f"[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É: {e}")

# --- –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
waiting_for_image_prompt = set()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True) 